package it.unicam.cs.asdl2021.mp1;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.NoSuchElementException;

import org.junit.jupiter.api.Test;

class TernaryHeapMinPriorityQueueTest {

	@Test
	final void insertTest() {
		TernaryHeapMinPriorityQueue minHeap = new TernaryHeapMinPriorityQueue();

		assertThrows(NullPointerException.class, () -> minHeap.insert(null));
		// Primo test su inserimento
		Job j0 = new Job("J0", 0.0);
		j0.setPriority(5);
		Job j1 = new Job("J1", 1.0);
		j1.setPriority(2);
		Job j2 = new Job("J2", 2.0);
		j2.setPriority(10);
		Job j3 = new Job("J3", 3.0);
		j3.setPriority(4);
		Job j4 = new Job("J4", 4.0);
		j4.setPriority(7);
		Job j5 = new Job("J5", 5.0);
		j5.setPriority(8);
		Job j6 = new Job("J6", 6.0);
		j6.setPriority(1);
		assertTrue(minHeap.size() == 0);
		ArrayList<PriorityQueueElement> heap = minHeap.getTernaryHeap();
		// All' inizio il minheap è vuoto
		assertTrue(heap.isEmpty());
		assertTrue(minHeap.size() == 0);
		// Inserimento primo elemento
		minHeap.insert(j0);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 1);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 5.0);
		assertTrue(heap.get(0).getHandle() == 0);
		// Inserimento secondo elemento
		minHeap.insert(j1);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 2);
		assertTrue(heap.size() == 2);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		// Inserimento terzo elemento
		minHeap.insert(j2);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 3);
		assertTrue(heap.size() == 3);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10.0);
		assertTrue(heap.get(2).getHandle() == 2);
		// Inserimento quarto elemento
		minHeap.insert(j3);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 4);
		assertTrue(heap.size() == 4);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		// Inserimento quinto elemento
		minHeap.insert(j4);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 5);
		assertTrue(heap.size() == 5);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 7.0);
		assertTrue(heap.get(4).getHandle() == 4);
		// Inserimento sesto elemento
		minHeap.insert(j5);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 6);
		assertTrue(heap.size() == 6);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 7.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 8.0);
		assertTrue(heap.get(5).getHandle() == 5);
		// Inserimento settimo elemento
		minHeap.insert(j6);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 7);
		assertTrue(heap.size() == 7);
		assertTrue(heap.get(0) == j6);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 7.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 8.0);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j0);
		assertTrue(heap.get(6).getPriority() == 5.0);
		assertTrue(heap.get(6).getHandle() == 6);
		// for(PriorityQueueElement j : heap)
		// System.out.println(j.getPriority());
		minHeap.clear();
		heap.clear();

		// Secondo test su inserimento

		j0.setPriority(16);
		j1.setPriority(14);
		j2.setPriority(10);
		j3.setPriority(8);
		j4.setPriority(7);
		j5.setPriority(9);
		j6.setPriority(3);
		Job j7 = new Job("J7", 7.0);
		j7.setPriority(2);
		Job j8 = new Job("J8", 8.0);
		j8.setPriority(4);
		Job j9 = new Job("J9", 9.0);
		j9.setPriority(1);
		// All' inizio il minheap è vuoto
		assertTrue(heap.isEmpty());
		assertTrue(minHeap.size() == 0);
		// Inserimento primo elemento
		minHeap.insert(j0);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 1);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 16.0);
		assertTrue(heap.get(0).getHandle() == 0);
		// Inserimento secondo elemento
		minHeap.insert(j1);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 2);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 14.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 16.0);
		assertTrue(heap.get(1).getHandle() == 1);
		// Inserimento terzo elemento
		minHeap.insert(j2);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 3);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j2);
		assertTrue(heap.get(0).getPriority() == 10.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 16.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 14.0);
		assertTrue(heap.get(2).getHandle() == 2);
		// Inserimento quarto elemento
		minHeap.insert(j3);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 4);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j3);
		assertTrue(heap.get(0).getPriority() == 8.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 16.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 14.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		// Inserimento quinto elemento
		minHeap.insert(j4);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 5);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j4);
		assertTrue(heap.get(0).getPriority() == 7.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j3);
		assertTrue(heap.get(1).getPriority() == 8.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 14.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		// Inserimento sesto elemento
		minHeap.insert(j5);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 6);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j4);
		assertTrue(heap.get(0).getPriority() == 7.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j3);
		assertTrue(heap.get(1).getPriority() == 8.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 14.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 9.0);
		assertTrue(heap.get(5).getHandle() == 5);
		// Inserimento settimo elemento
		minHeap.insert(j6);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 7);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j6);
		assertTrue(heap.get(0).getPriority() == 3.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(1).getPriority() == 7.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 14.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 9.0);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j3);
		assertTrue(heap.get(6).getPriority() == 8.0);
		assertTrue(heap.get(6).getHandle() == 6);
		// Inserimento ottavo elemento
		minHeap.insert(j7);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 8);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j7);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(1).getPriority() == 7.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j6);
		assertTrue(heap.get(2).getPriority() == 3.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 9.0);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j3);
		assertTrue(heap.get(6).getPriority() == 8.0);
		assertTrue(heap.get(6).getHandle() == 6);
		assertTrue(heap.get(7) == j1);
		assertTrue(heap.get(7).getPriority() == 14.0);
		assertTrue(heap.get(7).getHandle() == 7);
		// Inserimento nono elemento
		minHeap.insert(j8);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 9);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j7);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(1).getPriority() == 7.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j6);
		assertTrue(heap.get(2).getPriority() == 3.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 9.0);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j3);
		assertTrue(heap.get(6).getPriority() == 8.0);
		assertTrue(heap.get(6).getHandle() == 6);
		assertTrue(heap.get(7) == j1);
		assertTrue(heap.get(7).getPriority() == 14.0);
		assertTrue(heap.get(7).getHandle() == 7);
		assertTrue(heap.get(8) == j8);
		assertTrue(heap.get(8).getPriority() == 4.0);
		assertTrue(heap.get(8).getHandle() == 8);
		// Inserimento decimo elemento
		minHeap.insert(j9);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 10);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j9);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(1).getPriority() == 7.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(2).getPriority() == 2.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 10.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 16.0);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 9.0);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j3);
		assertTrue(heap.get(6).getPriority() == 8.0);
		assertTrue(heap.get(6).getHandle() == 6);
		assertTrue(heap.get(7) == j1);
		assertTrue(heap.get(7).getPriority() == 14.0);
		assertTrue(heap.get(7).getHandle() == 7);
		assertTrue(heap.get(8) == j8);
		assertTrue(heap.get(8).getPriority() == 4.0);
		assertTrue(heap.get(8).getHandle() == 8);
		assertTrue(heap.get(9) == j6);
		assertTrue(heap.get(9).getPriority() == 3.0);
		assertTrue(heap.get(9).getHandle() == 9);

		minHeap.clear();
		heap.clear();

		// Terzo test su inserimento
		j0.setPriority(5);
		j1.setPriority(1);
		j2.setPriority(5);
		j3.setPriority(5);
		j4.setPriority(1);
		// All' inizio il minheap è vuoto
		assertTrue(heap.isEmpty());
		assertTrue(minHeap.size() == 0);
		// Inserimento primo elemento
		minHeap.insert(j0);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 1);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 5.0);
		assertTrue(heap.get(0).getHandle() == 0);
		// Inserimento secondo elemento
		minHeap.insert(j1);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 2);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		// Inserimento terzo elemento
		minHeap.insert(j2);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 3);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 5.0);
		assertTrue(heap.get(2).getHandle() == 2);
		// Inserimento quarto elemento
		minHeap.insert(j3);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 4);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 5.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 5.0);
		assertTrue(heap.get(3).getHandle() == 3);
		// Inserimento quinto elemento
		minHeap.insert(j4);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 5);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(1).getPriority() == 1.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 5.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 5.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 5.0);
		assertTrue(heap.get(4).getHandle() == 4);

		minHeap.clear();
		heap.clear();

		// Quarto test su inserimento
		j0.setPriority(1);
		j1.setPriority(2);
		j2.setPriority(3);
		j3.setPriority(4);
		j4.setPriority(5);
		// All' inizio il minheap è vuoto
		assertTrue(heap.isEmpty());
		assertTrue(minHeap.size() == 0);
		// Inserimento primo elemento
		minHeap.insert(j0);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 1);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		// Inserimento secondo elemento
		minHeap.insert(j1);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 2);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		// Inserimento terzo elemento
		minHeap.insert(j2);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 3);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 3.0);
		assertTrue(heap.get(2).getHandle() == 2);
		// Inserimento quarto elemento
		minHeap.insert(j3);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 4);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 3.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		// Inserimento quinto elemento
		minHeap.insert(j4);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 5);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 3.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 5.0);
		assertTrue(heap.get(4).getHandle() == 4);

		minHeap.clear();
		heap.clear();

		// Quarto test su inserimento
		j0.setPriority(5);
		j1.setPriority(4);
		j2.setPriority(3);
		j3.setPriority(2);
		j4.setPriority(1);
		// All' inizio il minheap è vuoto
		assertTrue(heap.isEmpty());
		assertTrue(minHeap.size() == 0);
		// Inserimento primo elemento
		minHeap.insert(j0);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 1);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 5.0);
		assertTrue(heap.get(0).getHandle() == 0);
		// Inserimento secondo elemento
		minHeap.insert(j1);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 2);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 4.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		// Inserimento terzo elemento
		minHeap.insert(j2);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 3);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j2);
		assertTrue(heap.get(0).getPriority() == 3.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 4.0);
		assertTrue(heap.get(2).getHandle() == 2);
		// Inserimento quarto elemento
		minHeap.insert(j3);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 4);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j3);
		assertTrue(heap.get(0).getPriority() == 2.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j0);
		assertTrue(heap.get(1).getPriority() == 5.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 4.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 3.0);
		assertTrue(heap.get(3).getHandle() == 3);
		// Inserimento quinto elemento
		minHeap.insert(j4);
		assertFalse(heap.isEmpty());
		assertTrue(minHeap.size() == 5);
		heap = minHeap.getTernaryHeap();
		assertFalse(heap.isEmpty());
		assertTrue(heap.get(0) == j4);
		assertTrue(heap.get(0).getPriority() == 1.0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j3);
		assertTrue(heap.get(1).getPriority() == 2.0);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j1);
		assertTrue(heap.get(2).getPriority() == 4.0);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j2);
		assertTrue(heap.get(3).getPriority() == 3.0);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j0);
		assertTrue(heap.get(4).getPriority() == 5.0);
		assertTrue(heap.get(4).getHandle() == 4);
	}

	@Test
	final void minimumTest() {
		TernaryHeapMinPriorityQueue minHeap = new TernaryHeapMinPriorityQueue();

		assertThrows(NoSuchElementException.class, () -> minHeap.minimum());
		Job j0 = new Job("J0", 0.0);
		j0.setPriority(5);
		Job j1 = new Job("J1", 1.0);
		j1.setPriority(2);
		Job j2 = new Job("J2", 2.0);
		j2.setPriority(10);
		Job j3 = new Job("J3", 3.0);
		j3.setPriority(4);
		Job j4 = new Job("J4", 4.0);
		j4.setPriority(7);
		Job j5 = new Job("J5", 5.0);
		j5.setPriority(8);
		Job j6 = new Job("J6", 6.0);
		j6.setPriority(1);
		assertTrue(minHeap.size() == 0);
		// All' inizio il minheap è vuoto
		assertTrue(minHeap.size() == 0);
		minHeap.insert(j0);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j1);
		assertTrue(minHeap.minimum() == j1);
		minHeap.insert(j2);
		assertTrue(minHeap.minimum() == j1);
		minHeap.insert(j3);
		assertTrue(minHeap.minimum() == j1);
		minHeap.insert(j4);
		assertTrue(minHeap.minimum() == j1);
		minHeap.insert(j5);
		assertTrue(minHeap.minimum() == j1);
		minHeap.insert(j6);
		assertTrue(minHeap.minimum() == j6);
	}

	@Test
	final void extractMinimumTest() {
		TernaryHeapMinPriorityQueue minHeap = new TernaryHeapMinPriorityQueue();

		assertThrows(NoSuchElementException.class, () -> minHeap.minimum());
		Job j0 = new Job("J0", 0.0);
		j0.setPriority(-9330);
		Job j1 = new Job("J1", 1.0);
		j1.setPriority(-2565);
		Job j2 = new Job("J2", 2.0);
		j2.setPriority(-752);
		Job j3 = new Job("J3", 3.0);
		j3.setPriority(6017);
		Job j4 = new Job("J4", 4.0);
		j4.setPriority(9760);
		Job j5 = new Job("J5", 5.0);
		j5.setPriority(4431);
		Job j6 = new Job("J6", 6.0);
		j6.setPriority(-5991);
		Job j7 = new Job("J7", 7.0);
		j7.setPriority(2408);
		Job j8 = new Job("J8", 8.0);
		j8.setPriority(5185);
		Job j9 = new Job("J9", 9.0);
		j9.setPriority(6943);
		Job j10 = new Job("J10", 10.0);
		j10.setPriority(6513);
		Job j11 = new Job("J11", 11.0);
		j11.setPriority(-9055);
		Job j12 = new Job("J12", 12.0);
		j12.setPriority(-9971);
		Job j13 = new Job("J13", 13.0);
		j13.setPriority(1157);
		Job j14 = new Job("J14", 14.0);
		j14.setPriority(8871);
		Job j15 = new Job("J15", 15.0);
		j15.setPriority(9826);
		Job j16 = new Job("J16", 16.0);
		j16.setPriority(-3754);
		Job j17 = new Job("J17", 17.0);
		j17.setPriority(9711);
		Job j18 = new Job("J18", 18.0);
		j18.setPriority(1951);
		Job j19 = new Job("J19", 19.0);
		j19.setPriority(6603);
		Job j20 = new Job("J20", 20.0);
		j20.setPriority(-7976);
		Job j21 = new Job("J21", 21.0);
		j21.setPriority(7248);
		Job j22 = new Job("J22", 22.0);
		j22.setPriority(-1168);
		Job j23 = new Job("J23", 23.0);
		j23.setPriority(-9269);
		Job j24 = new Job("J24", 24.0);
		j24.setPriority(-6237);
		Job j25 = new Job("J25", 25.0);
		j25.setPriority(9433);
		Job j26 = new Job("J26", 26.0);
		j26.setPriority(-7260);
		Job j27 = new Job("J27", 27.0);
		j27.setPriority(1635);
		Job j28 = new Job("J28", 28.0);
		j28.setPriority(-7155);
		Job j29 = new Job("J29", 29.0);
		j29.setPriority(3672);
		Job j30 = new Job("J30", 30.0);
		j30.setPriority(-5253);
		Job j31 = new Job("J31", 31.0);
		j31.setPriority(-8880);

		// All' inizio il minheap è vuoto
		assertTrue(minHeap.size() == 0);
		minHeap.insert(j0);
		assertTrue(minHeap.size() == 1);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j1);
		assertTrue(minHeap.size() == 2);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j2);
		assertTrue(minHeap.size() == 3);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j3);
		assertTrue(minHeap.size() == 4);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j4);
		assertTrue(minHeap.size() == 5);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j5);
		assertTrue(minHeap.size() == 6);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j6);
		assertTrue(minHeap.size() == 7);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j7);
		assertTrue(minHeap.size() == 8);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j8);
		assertTrue(minHeap.size() == 9);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j9);
		assertTrue(minHeap.size() == 10);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j10);
		assertTrue(minHeap.size() == 11);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j11);
		assertTrue(minHeap.size() == 12);
		assertTrue(minHeap.minimum() == j0);
		minHeap.insert(j12);
		assertTrue(minHeap.size() == 13);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j13);
		assertTrue(minHeap.size() == 14);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j14);
		assertTrue(minHeap.size() == 15);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j15);
		assertTrue(minHeap.size() == 16);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j16);
		assertTrue(minHeap.size() == 17);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j17);
		assertTrue(minHeap.size() == 18);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j18);
		assertTrue(minHeap.size() == 19);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j19);
		assertTrue(minHeap.size() == 20);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j20);
		assertTrue(minHeap.size() == 21);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j21);
		assertTrue(minHeap.size() == 22);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j22);
		assertTrue(minHeap.size() == 23);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j23);
		assertTrue(minHeap.size() == 24);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j24);
		assertTrue(minHeap.size() == 25);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j25);
		assertTrue(minHeap.size() == 26);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j26);
		assertTrue(minHeap.size() == 27);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j27);
		assertTrue(minHeap.size() == 28);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j28);
		assertTrue(minHeap.size() == 29);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j29);
		assertTrue(minHeap.size() == 30);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j30);
		assertTrue(minHeap.size() == 31);
		assertTrue(minHeap.minimum() == j12);
		minHeap.insert(j31);
		assertTrue(minHeap.size() == 32);
		assertTrue(minHeap.minimum() == j12);

		ArrayList<PriorityQueueElement> heap = minHeap.getTernaryHeap();
		assertTrue(heap.get(0) == j12);
		assertTrue(heap.get(1) == j20);
		assertTrue(heap.get(2) == j23);
		assertTrue(heap.get(3) == j0);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j6);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j26);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j31);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j11);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j1);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(heap.get(27) == j27);
		assertTrue(heap.get(28) == j9);
		assertTrue(heap.get(29) == j29);
		assertTrue(heap.get(30) == j30);
		assertTrue(heap.get(31) == j10);
		assertTrue(heap.size() == 32);

		// Estrazione del minimo
		// Prima estrazione
		assertTrue(minHeap.extractMinimum() == j12);
		assertTrue(heap.size() == 31);
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(1) == j20);
		assertTrue(heap.get(2) == j23);
		assertTrue(heap.get(3) == j11);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j6);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j26);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j31);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j1);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(heap.get(27) == j27);
		assertTrue(heap.get(28) == j9);
		assertTrue(heap.get(29) == j29);
		assertTrue(heap.get(30) == j30);
		assertTrue(minHeap.minimum() == j0);
		// Seconda estrazione
		assertTrue(minHeap.extractMinimum() == j0);
		assertTrue(heap.size() == 30);
		assertTrue(heap.get(0) == j23);
		assertTrue(heap.get(1) == j20);
		assertTrue(heap.get(2) == j26);
		assertTrue(heap.get(3) == j11);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j6);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j31);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j1);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(heap.get(27) == j27);
		assertTrue(heap.get(28) == j9);
		assertTrue(heap.get(29) == j29);
		assertTrue(minHeap.minimum() == j23);
		// Terza estrazione
		assertTrue(minHeap.extractMinimum() == j23);
		assertTrue(heap.size() == 29);
		assertTrue(heap.get(0) == j11);
		assertTrue(heap.get(1) == j20);
		assertTrue(heap.get(2) == j26);
		assertTrue(heap.get(3) == j31);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j6);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j29);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j1);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(heap.get(27) == j27);
		assertTrue(heap.get(28) == j9);
		assertTrue(minHeap.minimum() == j11);
		// Quarta estrazione
		assertTrue(minHeap.extractMinimum() == j11);
		assertTrue(heap.size() == 28);
		assertTrue(heap.get(0) == j31);
		assertTrue(heap.get(1) == j20);
		assertTrue(heap.get(2) == j26);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j6);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j1);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(heap.get(27) == j27);
		assertTrue(minHeap.minimum() == j31);
		// Quinta estrazione
		assertTrue(minHeap.extractMinimum() == j31);
		assertTrue(heap.size() == 27);
		assertTrue(heap.get(0) == j20);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(2) == j26);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j28);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(heap.get(26) == j8);
		assertTrue(minHeap.minimum() == j20);
		// Sesta estrazione
		assertTrue(minHeap.extractMinimum() == j20);
		assertTrue(heap.size() == 26);
		assertTrue(heap.get(0) == j26);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(2) == j28);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j24);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j22);
		assertTrue(heap.get(25) == j25);
		assertTrue(minHeap.minimum() == j26);
		// Settima estrazione
		assertTrue(minHeap.extractMinimum() == j26);
		assertTrue(heap.size() == 25);
		assertTrue(heap.get(0) == j28);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(2) == j24);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j22);
		assertTrue(heap.get(8) == j30);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(heap.get(24) == j25);
		assertTrue(minHeap.minimum() == j28);
		// Ottava estrazione
		assertTrue(minHeap.extractMinimum() == j28);
		assertTrue(heap.size() == 24);
		assertTrue(heap.get(0) == j24);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(2) == j30);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j16);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j22);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(heap.get(23) == j2);
		assertTrue(minHeap.minimum() == j24);
		// Nona estrazione
		assertTrue(minHeap.extractMinimum() == j24);
		assertTrue(heap.size() == 23);
		assertTrue(heap.get(0) == j6);
		assertTrue(heap.get(1) == j16);
		assertTrue(heap.get(2) == j30);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j2);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j22);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(heap.get(22) == j7);
		assertTrue(minHeap.minimum() == j6);
		// Decima estrazione
		assertTrue(minHeap.extractMinimum() == j6);
		assertTrue(heap.size() == 22);
		assertTrue(heap.get(0) == j30);
		assertTrue(heap.get(1) == j16);
		assertTrue(heap.get(2) == j22);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j2);
		assertTrue(heap.get(6) == j1);
		assertTrue(heap.get(7) == j7);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j27);
		assertTrue(heap.get(21) == j21);
		assertTrue(minHeap.minimum() == j30);
		// Undicesima estrazione
		assertTrue(minHeap.extractMinimum() == j30);
		assertTrue(heap.size() == 21);
		assertTrue(heap.get(0) == j16);
		assertTrue(heap.get(1) == j1);
		assertTrue(heap.get(2) == j22);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j2);
		assertTrue(heap.get(6) == j27);
		assertTrue(heap.get(7) == j7);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j18);
		assertTrue(heap.get(19) == j19);
		assertTrue(heap.get(20) == j21);
		assertTrue(minHeap.minimum() == j16);
		// Dodicesima estrazione
		assertTrue(minHeap.extractMinimum() == j16);
		assertTrue(heap.size() == 20);
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(1) == j2);
		assertTrue(heap.get(2) == j22);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j18);
		assertTrue(heap.get(6) == j27);
		assertTrue(heap.get(7) == j7);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j21);
		assertTrue(heap.get(19) == j19);
		assertTrue(minHeap.minimum() == j1);
		// Tredicesima estrazione
		assertTrue(minHeap.extractMinimum() == j1);
		assertTrue(heap.size() == 19);
		assertTrue(heap.get(0) == j22);
		assertTrue(heap.get(1) == j2);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j13);
		assertTrue(heap.get(5) == j18);
		assertTrue(heap.get(6) == j27);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(heap.get(18) == j21);
		assertTrue(minHeap.minimum() == j22);
		// Quattordicesima estrazione
		assertTrue(minHeap.extractMinimum() == j22);
		assertTrue(heap.size() == 18);
		assertTrue(heap.get(0) == j2);
		assertTrue(heap.get(1) == j13);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j18);
		assertTrue(heap.get(6) == j27);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(heap.get(17) == j17);
		assertTrue(minHeap.minimum() == j2);
		// Quindicesima estrazione
		assertTrue(minHeap.extractMinimum() == j2);
		assertTrue(heap.size() == 17);
		assertTrue(heap.get(0) == j13);
		assertTrue(heap.get(1) == j27);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j18);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(heap.get(16) == j5);
		assertTrue(minHeap.minimum() == j13);
		// Sedicesima estrazione
		assertTrue(minHeap.extractMinimum() == j13);
		assertTrue(heap.size() == 16);
		assertTrue(heap.get(0) == j27);
		assertTrue(heap.get(1) == j18);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(heap.get(15) == j15);
		assertTrue(minHeap.minimum() == j27);
		// Diciassettesima estrazione
		assertTrue(minHeap.extractMinimum() == j27);
		assertTrue(heap.size() == 15);
		assertTrue(heap.get(0) == j18);
		assertTrue(heap.get(1) == j5);
		assertTrue(heap.get(2) == j7);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j8);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(heap.get(14) == j14);
		assertTrue(minHeap.minimum() == j18);
		// Diciottesima estrazione
		assertTrue(minHeap.extractMinimum() == j18);
		assertTrue(heap.size() == 14);
		assertTrue(heap.get(0) == j7);
		assertTrue(heap.get(1) == j5);
		assertTrue(heap.get(2) == j8);
		assertTrue(heap.get(3) == j29);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j14);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j3);
		assertTrue(heap.get(12) == j10);
		assertTrue(heap.get(13) == j4);
		assertTrue(minHeap.minimum() == j7);
		// Diciannovesima estrazione
		assertTrue(minHeap.extractMinimum() == j7);
		assertTrue(heap.size() == 13);
		assertTrue(heap.get(0) == j29);
		assertTrue(heap.get(1) == j5);
		assertTrue(heap.get(2) == j8);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j14);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j4);
		assertTrue(heap.get(12) == j10);
		assertTrue(minHeap.minimum() == j29);
		// Ventesima estrazione
		assertTrue(minHeap.extractMinimum() == j29);
		assertTrue(heap.size() == 12);
		assertTrue(heap.get(0) == j5);
		assertTrue(heap.get(1) == j10);
		assertTrue(heap.get(2) == j8);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j19);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j14);
		assertTrue(heap.get(10) == j9);
		assertTrue(heap.get(11) == j4);
		assertTrue(minHeap.minimum() == j5);
		// Ventunesima estrazione
		assertTrue(minHeap.extractMinimum() == j5);
		assertTrue(heap.size() == 11);
		assertTrue(heap.get(0) == j8);
		assertTrue(heap.get(1) == j10);
		assertTrue(heap.get(2) == j19);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j4);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j14);
		assertTrue(heap.get(10) == j9);
		assertTrue(minHeap.minimum() == j8);
		// Ventiduesima estrazione
		assertTrue(minHeap.extractMinimum() == j8);
		assertTrue(heap.size() == 10);
		assertTrue(heap.get(0) == j3);
		assertTrue(heap.get(1) == j10);
		assertTrue(heap.get(2) == j19);
		assertTrue(heap.get(3) == j9);
		assertTrue(heap.get(4) == j21);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j4);
		assertTrue(heap.get(8) == j25);
		assertTrue(heap.get(9) == j14);
		assertTrue(minHeap.minimum() == j3);
		// Ventitresima estrazione
		assertTrue(minHeap.extractMinimum() == j3);
		assertTrue(heap.size() == 9);
		assertTrue(heap.get(0) == j10);
		assertTrue(heap.get(1) == j21);
		assertTrue(heap.get(2) == j19);
		assertTrue(heap.get(3) == j9);
		assertTrue(heap.get(4) == j14);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j4);
		assertTrue(heap.get(8) == j25);
		assertTrue(minHeap.minimum() == j10);
		// Ventiquattresima estrazione
		assertTrue(minHeap.extractMinimum() == j10);
		assertTrue(heap.size() == 8);
		assertTrue(heap.get(0) == j19);
		assertTrue(heap.get(1) == j21);
		assertTrue(heap.get(2) == j25);
		assertTrue(heap.get(3) == j9);
		assertTrue(heap.get(4) == j14);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(heap.get(7) == j4);
		assertTrue(minHeap.minimum() == j19);
		// Venticinquesima estrazione
		assertTrue(minHeap.extractMinimum() == j19);
		assertTrue(heap.size() == 7);
		assertTrue(heap.get(0) == j9);
		assertTrue(heap.get(1) == j21);
		assertTrue(heap.get(2) == j25);
		assertTrue(heap.get(3) == j4);
		assertTrue(heap.get(4) == j14);
		assertTrue(heap.get(5) == j15);
		assertTrue(heap.get(6) == j17);
		assertTrue(minHeap.minimum() == j9);
		// Ventiseiesima estrazione
		assertTrue(minHeap.extractMinimum() == j9);
		assertTrue(heap.size() == 6);
		assertTrue(heap.get(0) == j21);
		assertTrue(heap.get(1) == j14);
		assertTrue(heap.get(2) == j25);
		assertTrue(heap.get(3) == j4);
		assertTrue(heap.get(4) == j17);
		assertTrue(heap.get(5) == j15);
		assertTrue(minHeap.minimum() == j21);
		// Ventisettesima estrazione
		assertTrue(minHeap.extractMinimum() == j21);
		assertTrue(heap.size() == 5);
		assertTrue(heap.get(0) == j14);
		assertTrue(heap.get(1) == j17);
		assertTrue(heap.get(2) == j25);
		assertTrue(heap.get(3) == j4);
		assertTrue(heap.get(4) == j15);
		assertTrue(minHeap.minimum() == j14);
		// Ventottesima estrazione
		assertTrue(minHeap.extractMinimum() == j14);
		assertTrue(heap.size() == 4);
		assertTrue(heap.get(0) == j25);
		assertTrue(heap.get(1) == j17);
		assertTrue(heap.get(2) == j15);
		assertTrue(heap.get(3) == j4);
		assertTrue(minHeap.minimum() == j25);
		// Ventinovesima estrazione
		assertTrue(minHeap.extractMinimum() == j25);
		assertTrue(heap.size() == 3);
		assertTrue(heap.get(0) == j17);
		assertTrue(heap.get(1) == j4);
		assertTrue(heap.get(2) == j15);
		assertTrue(minHeap.minimum() == j17);
		// Trentesima estrazione
		assertTrue(minHeap.extractMinimum() == j17);
		assertTrue(heap.size() == 2);
		assertTrue(heap.get(0) == j4);
		assertTrue(heap.get(1) == j15);
		assertTrue(minHeap.minimum() == j4);
		// Trentunesima estrazione
		assertTrue(minHeap.extractMinimum() == j4);
		assertTrue(heap.size() == 1);
		assertTrue(heap.get(0) == j15);
		assertTrue(minHeap.minimum() == j15);
		// Trentaduesima estrazione
		assertTrue(minHeap.extractMinimum() == j15);
		assertTrue(heap.size() == 0);
		assertTrue(heap.isEmpty());
		assertThrows(NoSuchElementException.class, () -> minHeap.minimum());
	}

	@Test
	final void decreasePriorityTest() {
		TernaryHeapMinPriorityQueue minHeap = new TernaryHeapMinPriorityQueue();
		// Primo test
		assertThrows(NoSuchElementException.class, () -> minHeap.decreasePriority(null, 0.0));
		Job j0 = new Job("J0", 0.0);
		j0.setPriority(5);
		Job j1 = new Job("J1", 1.0);
		j1.setPriority(2);
		Job j2 = new Job("J2", 2.0);
		j2.setPriority(10);
		Job j3 = new Job("J3", 3.0);
		j3.setPriority(4);
		Job j4 = new Job("J4", 4.0);
		j4.setPriority(7);
		Job j5 = new Job("J5", 5.0);
		j5.setPriority(8);
		Job j6 = new Job("J6", 6.0);
		j6.setPriority(1);
		Job j7 = new Job("J7", 7.0);
		j7.setPriority(1);
		// All' inizio il minheap è vuoto
		assertTrue(minHeap.size() == 0);
		ArrayList<PriorityQueueElement> heap = minHeap.getTernaryHeap();
		assertTrue(heap.size() == minHeap.size());
		minHeap.insert(j0);
		minHeap.insert(j1);
		minHeap.insert(j2);
		minHeap.insert(j3);
		minHeap.insert(j4);
		minHeap.insert(j5);
		minHeap.insert(j6);
		assertTrue(minHeap.size() == 7);
		heap = minHeap.getTernaryHeap();
		assertTrue(heap.size() == minHeap.size());
		assertTrue(minHeap.minimum() == j6);

		assertThrows(NoSuchElementException.class, () -> minHeap.decreasePriority(j7, 0.0));
		assertThrows(IllegalArgumentException.class, () -> minHeap.decreasePriority(j0, 6.0));
		minHeap.decreasePriority(j1, 0.0);
		heap = minHeap.getTernaryHeap();
		assertTrue(heap.get(0) == j1);
		assertTrue(heap.get(0).getPriority() == 0);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(1).getPriority() == 1);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 7);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 8);
		assertTrue(heap.get(5).getHandle() == 5);
		assertTrue(heap.get(6) == j0);
		assertTrue(heap.get(6).getPriority() == 5);
		assertTrue(heap.get(6).getHandle() == 6);
		assertTrue(minHeap.minimum() == j1);

		assertTrue(minHeap.extractMinimum() == j1);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 6);
		assertTrue(minHeap.size() == heap.size());
		assertTrue(minHeap.minimum() == j6);
		minHeap.decreasePriority(j0, -2);
		heap = minHeap.getTernaryHeap();
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == -2);
		assertTrue(heap.get(0).getHandle() == 0);
		assertTrue(heap.get(1) == j6);
		assertTrue(heap.get(1).getPriority() == 1);
		assertTrue(heap.get(1).getHandle() == 1);
		assertTrue(heap.get(2) == j2);
		assertTrue(heap.get(2).getPriority() == 10);
		assertTrue(heap.get(2).getHandle() == 2);
		assertTrue(heap.get(3) == j3);
		assertTrue(heap.get(3).getPriority() == 4);
		assertTrue(heap.get(3).getHandle() == 3);
		assertTrue(heap.get(4) == j4);
		assertTrue(heap.get(4).getPriority() == 7);
		assertTrue(heap.get(4).getHandle() == 4);
		assertTrue(heap.get(5) == j5);
		assertTrue(heap.get(5).getPriority() == 8);
		assertTrue(heap.get(5).getHandle() == 5);

		minHeap.clear();
		heap.clear();
		// Secondo test
		j0.setPriority(7);
		minHeap.insert(j0);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 1);
		assertTrue(minHeap.size() == heap.size());
		assertTrue(minHeap.minimum() == j0);
		assertTrue(heap.get(0) == j0);
		assertTrue(heap.get(0).getPriority() == 7);
		assertTrue(heap.get(0).getHandle() == 0);
		assertFalse(heap.isEmpty());
		// Lo estraggo
		assertTrue(minHeap.extractMinimum() == j0);
		heap = minHeap.getTernaryHeap();
		assertTrue(minHeap.size() == 0);
		assertTrue(minHeap.size() == heap.size());
		assertTrue(heap.isEmpty());
		assertThrows(NoSuchElementException.class, () -> minHeap.minimum());
		assertThrows(NoSuchElementException.class, () -> minHeap.extractMinimum());
	}

}
